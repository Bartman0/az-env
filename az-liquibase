#!/bin/bash

set -e

# command-line arguments:
# - environment dev/tst/acc/prd
# - container base name, default dwh-ddl

. ${0%/*}/urlencode.sh

# use parameters, or use defaults otherwise
environment=${1:-dev}
container_base_name=${3:-dwh-ddl}

if [ -z "${USER}" ]
then
	echo "USER env var is not set, please fix"
	exit 1
fi

if [ -z "${AZURE_TENANT_ID}" -o -z "${AZURE_SUBSCRIPTION_ID}" -o -z "${KEY_VAULT_NAME}" ]
then
	echo "some env vars are missing, please run az-env first"
	exit 1
fi

if [ ! -f ./Dockerfile ]
then
	echo "no Dockerfile found, I am probably in the wrong directory?"
	exit 1
fi

client_name=${KEY_VAULT_NAME%-*}
container_name="${container_base_name}"
image_name="${container_name}:${USER}"

export CONF_KEYVAULT=${KEY_VAULT_URI}
export AZURE_CLIENT_ID=${APP_DEVOPS_CLIENTID}
export AZURE_CLIENT_SECRET=${APP_DEVOPS_PASSWORD}

# run in subshell so an exit code != 0 has no consequences
( set +e; docker rm "${container_name}"; true )
docker build -t ${ACR_REGISTRY}/${image_name} .
snowflake_url="jdbc:snowflake://${SNOWFLAKE_ACCOUNT_URL}/?db=DWH_${environment}"
container_command="liquibase --liquibaseSchemaName=MA --username=${SNOWFLAKE_LIQUIBASE_USERNAME} --password=${SNOWFLAKE_LIQUIBASE_PASSWORD} --url=${snowflake_url} --databaseChangeLogTableName=MELOG_LIQUIBASE --databaseChangeLogLockTableName=MELOG_LIQUIBASELOCK --changeLogFile=master.xml --logLevel=info update"
docker run -it --rm --name "${container_name}" -e CONF_KEYVAULT -e AZURE_TENANT_ID -e AZURE_CLIENT_ID -e AZURE_CLIENT_SECRET ${ACR_REGISTRY}/${image_name} ${container_command}
