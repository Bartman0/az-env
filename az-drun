#!/bin/bash

set -e

# command-line arguments:
# - environment dev/tst/acc/prd/local
# - parameter, for example: klantnaam=test
# - container base name, default dwh-etl

. ${0%/*}/urlencode.sh

# use parameters, or use defaults otherwise
environment=${1:-dev}
param1="$2"
param1_value="${param1#*=}"
param1_first3="${param1_value:0:3}"
container_base_name=${3:-dwh-etl}

if [ -z "${USER}" ]
then
	echo "USER env var is not set, please fix"
	exit 1
fi

if [ -z "${AZURE_TENANT_ID}" -o -z "${AZURE_SUBSCRIPTION_ID}" -o -z "${KEY_VAULT_NAME}" ]
then
	echo "some env vars are missing, please run az-env first"
	exit 1
fi

if [ ! -f ./Dockerfile ]
then
	echo "no Dockerfile found, I am probably in the wrong directory?"
	exit 1
fi

run_local=0
if [ "$environment" == "local" ]
then
	run_local=1
fi

function parse_connection_string {
	OLD_IFS=${IFS}
	IFS=';'
	eval $(echo "$1" | (read -s DefaultEndpointsProtocol EndpointSuffix AccountName AccountKey; \
		echo "$DefaultEndpointsProtocol $EndpointSuffix $AccountName $AccountKey"))
	results=($DefaultEndpointsProtocol $EndpointSuffix $AccountName $AccountKey)
	if [ ${#results[@]} -ne 4 ]
	then
		echo "error reading connection string" >&2
	else
		# just eval the strings with assignments, rename var names in the process, prefix with CONN_
		eval "CONN_PROTOCOL=${results[0]}"
		eval "CONN_SUFFIX=${results[1]}"
		eval "CONN_ACCOUNT_NAME=${results[2]}"
		eval "CONN_ACCOUNT_KEY=${results[3]}"
	fi
	IFS=${OLD_IFS}
}

function do_mount {
	arch=$(uname -s)
	case "${arch}" in
	Darwin)
		open -g "$2"
		echo "-v /Volumes/$1:/$1"
		echo "mounted /$1" >&2
		;;
	*)
		echo "mount on this platform is not supported yet" >&2
		;;
	esac
}

function docker_mount_binds {
	mkdir -p mnt
	account_ids=($(az storage account list | jq -r '.[].id'))
	binds=()
	for id in ${account_ids[@]}
	do
		connection=$(az storage account show-connection-string --ids "${id}" | jq -r ".connectionString")
		parse_connection_string "${connection}"
		case "${CONN_ACCOUNT_NAME}" in
		# if the account name equals the resource group without dashes plus 'external', we have the external storage account at hand
		"${RESOURCE_GROUP//-/}external")
			# get the specific key vault
			vault_name=$(az keyvault list | jq -r ".[].name" | grep -i "${RESOURCE_GROUP}-${param1_first3}")
			sas_token=$(az keyvault secret show --vault-name "${vault_name}" --name "sas-token" -o json | jq -r ".value")
			key=$(rawurlencode "${CONN_ACCOUNT_KEY}")
			# mount the external storage account on the param1 value
			local_mount=$(do_mount "${param1_value}" "smb://${CONN_ACCOUNT_NAME}:${key}@${CONN_ACCOUNT_NAME}.file.${CONN_SUFFIX}/${param1_value}")
			binds+=($local_mount)
			;;
		# if the account name equals the resource group without dashes, we have the default storage account at hand
		"${RESOURCE_GROUP//-/}")
			key=$(rawurlencode "${CONN_ACCOUNT_KEY}")
			# mount the standard /data and /archive directories
			local_mount=$(do_mount "data" "smb://${CONN_ACCOUNT_NAME}:${key}@${CONN_ACCOUNT_NAME}.file.${CONN_SUFFIX}/data")
			binds+=($local_mount)
			local_mount=$(do_mount "archive" "smb://${CONN_ACCOUNT_NAME}:${key}@${CONN_ACCOUNT_NAME}.file.${CONN_SUFFIX}/archive")
			binds+=($local_mount)
			;;
		esac
	done
	echo "${binds[@]}"
}

client_name=${KEY_VAULT_NAME%-*}
container_name="${container_base_name}"
image_name="${container_name}:${USER}"
deployment_group="container-etl-${USER}"   # the default name when not specifying a name
container_command="/etl/scripts/etl_${USER}.sh"
container_command_array="[\"${container_command}\"]"
if [ -z "${param1_value}" ]
then
    container_group="${client_name}-${environment}-etl"
else
    container_group="${client_name}-${environment}-etl-${param1_value}"
fi

export CONF_KEYVAULT=${KEY_VAULT_URI}
export AZURE_CLIENT_ID=${APP_ETL_CLIENTID}
export AZURE_CLIENT_SECRET=${APP_ETL_PASSWORD}

# run in subshell so an exit code != 0 has no consequences
( set +e; docker rm "${container_name}"; true )
docker build -t ${ACR_REGISTRY}/${image_name} .

# we may not need it, but we are going to login anyway
az acr login --name ${ACR_NAME} --subscription ${SUBSCRIPTION_ID}

if [ ${run_local} -eq 1 ]
then
	binds=$(docker_mount_binds)
	# the env vars are set again in this local run to make copy-paste of the command complete and therefore easier
	docker run -it --rm ${binds} --name "${container_name}" -e CONF_KEYVAULT="${KEY_VAULT_URI}" -e AZURE_TENANT_ID -e AZURE_CLIENT_ID="${APP_ETL_CLIENTID}" -e AZURE_CLIENT_SECRET="${APP_ETL_PASSWORD}" ${ACR_REGISTRY}/${image_name} "${container_command}"
else
	docker push ${ACR_REGISTRY}/${image_name}
	# test existence of deployment group
	deployment_group_indicator=$(set +e; az deployment group show -g ${RESOURCE_GROUP} -n ${deployment_group} > /dev/null 2>&1; echo $?)
	if [ "${deployment_group_indicator}" == "0" ]
	then
		# the deployment group already exists, just start the container
		az container start -g ${RESOURCE_GROUP} -n ${container_group}
	else
		# create the deployment group with the container parameters
		declare -a container_parameters
		container_parameters=( "projectName=${client_name}" \
			"containerProject=${container_name}" \
			"containerName=${container_name}" \
			"containerCommand=${container_command_array}" \
			"environment=${environment}" \
			"etlPrincipalId=${APP_ETL_CLIENTID}" \
			"etlPrincipalPassword=${APP_ETL_PASSWORD}" \
			"containerTag=${USER}" )
		if [ "${param1}" != "" ]; then
			container_parameters+=( "${param1}" )
		fi
		# put '-p ' for each parameter
		container_parameters=( "${container_parameters[@]/#/-p }" )
		az deployment group create -g ${RESOURCE_GROUP} -n ${deployment_group} --template-file container-etl-template.json \
			${container_parameters[@]}
		# we need to start it explicitly here too
		az container start -g ${RESOURCE_GROUP} -n ${container_group}
	fi
	domain=$(az ad signed-in-user show | jq -r ".userPrincipalName" | cut -d '@' -f 2)
        container_url="https://portal.azure.com/#@${domain}/resource/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP}/providers/Microsoft.ContainerInstance/containerGroups/${container_group}/containers"
        echo "for progress see: ${container_url}"
	open "${container_url}"
fi

