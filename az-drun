#!/bin/bash

set -e

# use parameters, or use defaults otherwise
environment=${1:-dev}
container_base_name=${2:-dwh-etl}

if [ -z "${USER}" ]
then
	echo "USER env var is not set, please fix"
	exit 1
fi

if [ -z "${AZURE_TENANT_ID}" -o -z "${KEY_VAULT_NAME}" ]
then
	echo "some env vars are missing, please run az-env first"
	exit 1
fi

run_local=0
if [ "$1" == "local" ]
then
	run_local=1
fi

client_name=${KEY_VAULT_NAME%-*}
container_name="${client_name}-${container_base_name}"
acr_name=${client_name}001
acr_registry=${acr_name}.azurecr.io
image_name="${container_name}:${USER}"
deployment_group="${image_name//:/-}"

export CONF_KEYVAULT=${KEY_VAULT_URI}
export AZURE_CLIENT_ID=${APP_ETL_CLIENTID}
export AZURE_CLIENT_SECRET=${APP_ETL_PASSWORD}

# run in subshell so an exit code != 0 has no consequences
( set +e; docker rm "${container_name}"; true )
docker build -t ${acr_registry}/${image_name} .

if [ ${run_local} -eq 1 ]
then
	docker run -it --rm --name "${container_name}" -e CONF_KEYVAULT -e AZURE_TENANT_ID -e AZURE_CLIENT_ID -e AZURE_CLIENT_SECRET ${acr_registry}/${image_name} -file "${USER}.kjb"
else
	az acr login --name ${acr_name} --subscription ${SUBSCRIPTION_ID}
	docker push ${acr_registry}/${image_name}
	# test existence of deployment group
	deployment_group_indicator=$(set +e; az deployment group show -g ${RESOURCE_GROUP} -n ${deployment_group} > /dev/null 2>&1; echo $?)
	if [ "${deployment_group_indicator}" == "0" ]
	then
		# the deployment group already exists, just start the container
		az container start -g ${RESOURCE_GROUP} -n ${deployment_group}
	else
		# create the deployment group with the container parameters
		# TBD create container parameters
		az deployment group create -g ${RESOURCE_GROUP} --template-file container-etl-template.json \
			-p "projectName=${client_name}" \
			-p "containerProject=${container_name}" \
			-p "containerName=${container_name}" \
			-p "environment=${environment}" \
			-p "etlPrincipalId=${AZURE_CLIENT_ID}" \
			-p "etlPrincipalPassword=${AZURE_CLIENT_SECRET}" \
			-p "containerTag=${USER}"
	fi
fi

