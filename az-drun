#!/bin/bash

set -e

# use parameters, or use defaults otherwise
environment=${1:-dev}
param1="$2"
param1_value="${param1#*=}"
container_base_name=${3:-dwh-etl}

if [ -z "${USER}" ]
then
	echo "USER env var is not set, please fix"
	exit 1
fi

if [ -z "${AZURE_TENANT_ID}" -o -z "${AZURE_SUBSCRIPTION_ID}" -o -z "${KEY_VAULT_NAME}" ]
then
	echo "some env vars are missing, please run az-env first"
	exit 1
fi

if [ ! -f ./Dockerfile ]
then
	echo "no Dockerfile found, I am probably in the wrong directory?"
	exit 1
fi

run_local=0
if [ "$environment" == "local" ]
then
	run_local=1
fi

client_name=${KEY_VAULT_NAME%-*}
#container_name="${client_name}-${container_base_name}"
container_name="${container_base_name}"
acr_name=${client_name}001
acr_registry=${acr_name}.azurecr.io
image_name="${container_name}:${USER}"
#deployment_group="${image_name//:/-}"
deployment_group="container-etl-template"   # the default name when not specifying a name
container_command="/etl/scripts/etl_${USER}.sh"
container_command_array="[\"${container_command}\"]"
container_group="${client_name}-${environment}-etl-${param1_value}"

export CONF_KEYVAULT=${KEY_VAULT_URI}
export AZURE_CLIENT_ID=${APP_ETL_CLIENTID}
export AZURE_CLIENT_SECRET=${APP_ETL_PASSWORD}

# run in subshell so an exit code != 0 has no consequences
( set +e; docker rm "${container_name}"; true )
docker build -t ${acr_registry}/${image_name} .

# we may not need it, but we are going to login anyway
az acr login --name ${acr_name} --subscription ${SUBSCRIPTION_ID}

if [ ${run_local} -eq 1 ]
then
	# the env vars are set again in this local run to make copy-paste of the command complete and therefore easier
	docker run -it --rm --name "${container_name}" -e CONF_KEYVAULT="${KEY_VAULT_URI}" -e AZURE_TENANT_ID -e AZURE_CLIENT_ID="${APP_ETL_CLIENTID}" -e AZURE_CLIENT_SECRET="${APP_ETL_PASSWORD}" ${acr_registry}/${image_name} "${container_command}"
else
	docker push ${acr_registry}/${image_name}
	# test existence of deployment group
	deployment_group_indicator=$(set +e; az deployment group show -g ${RESOURCE_GROUP} -n ${deployment_group} > /dev/null 2>&1; echo $?)
	if [ "${deployment_group_indicator}" == "0" ]
	then
		# the deployment group already exists, just start the container
		az container start -g ${RESOURCE_GROUP} -n ${container_group}
	else
		# create the deployment group with the container parameters
		declare -a container_parameters
		container_parameters=( "projectName=${client_name}" \
			"containerProject=${container_name}" \
			"containerName=${container_name}" \
			"containerCommand=${container_command_array}" \
			"environment=${environment}" \
			"etlPrincipalId=${APP_ETL_CLIENTID}" \
			"etlPrincipalPassword=${APP_ETL_PASSWORD}" \
			"containerTag=${USER}" )
		if [ "${param1}" != "" ]; then
			container_parameters+=( "${param1}" )
		fi
		# put '-p ' for each parameter
		container_parameters=( "${container_parameters[@]/#/-p }" )
		az deployment group create -g ${RESOURCE_GROUP} -n ${deployment_group} --template-file container-etl-template.json \
			${container_parameters[@]}
	fi
fi

