#!/bin/bash

environment=${1:-dev}

IFS=$'\n'

# first make sure we are logged out
az account clear
#az logout

set -e

title="Select subscription"
prompt="Pick a subscription:"
sub_info=$(az login 2> /dev/null)
options=($(echo ${sub_info} | jq -r ".[].name"))

echo "$title"
PS3="$prompt "
select opt in "${options[@]}" "Quit"
do
    if [[ "$REPLY" == "$((${#options[@]}+1))" ]]; then exit; fi

    # complain if no reply was there, and loop to ask again
    if [ "$REPLY" == "" -o $REPLY -gt $((${#options[@]}+1)) ]
    then
        echo "not a valid response"
        continue
    fi

    # now we can use the selected subscription
    break
done

index=$(($REPLY-1))
sub_name=${options[$index]}
echo "chosen subscription: ${sub_name}"
echo ""

# set jq var to shell var sub_name
sub_select='.[] | select(.name == $sub_name)'
sub_id=$(echo ${sub_info}    | jq -r --arg sub_name "${sub_name}" "${sub_select}.id")
tenant_id=$(echo ${sub_info} | jq -r --arg sub_name "${sub_name}" "${sub_select}.tenantId")
home_tenant_id=$(echo ${sub_info} | jq -r --arg sub_name "${sub_name}" "${sub_select}.homeTenantId")
# get all other subscriptions in the same home tenant
other_sub_ids=($(echo "${sub_info}" | jq -r --arg home_tenant_id "${home_tenant_id}" --arg sub_id "${sub_id}" '.[] | select(.homeTenantId == $home_tenant_id and .id != $sub_id).id'))
echo "subscription id: ${sub_id}"
echo "tenant id: ${tenant_id}"
echo "home tenant id: ${home_tenant_id}"
echo "other subscription id's: ${other_sub_ids[@]}"

# set subscription on account
az account set -s "${sub_id}"

acr_name=$(az acr list | jq -r ".[].name" | head -1)
if [[ -z ${acr_name} ]]
then
    # switch to the other subscriptions and lookup there
    for other_sub_id in "${other_sub_ids[@]}"
    do
        az account set -s "${other_sub_id}"
        acr_name=$(az acr list | jq -r ".[].name" | head -1)
    if [[ ! -z ${acr_name} ]]; then
            break
        fi
    done
    # and switch back again
    az account set -s "${sub_id}"
fi
acr_registry="${acr_name}.azurecr.io"
echo "ACR: ${acr_registry}"

# get resource group name
resource_group=$(az group list | jq -r --arg env "${environment}" '.[] | select(.name|test($env)).name')
echo "resource group name: ${resource_group}"
# get key vault name
key_vault_name=$(az keyvault list | jq -r --arg env "${environment}$" '.[] | select(.name|test($env)).name')
echo "key vault name: ${key_vault_name}"

if [ ! -z "${AZURE_CENTRAL_ACR_NAME}" -a ! -z "${AZURE_CENTRAL_ACR_SUBSCRIPTION_ID}" ]
then
    az acr login --name="${AZURE_CENTRAL_ACR_NAME}" --subscription "${AZURE_CENTRAL_ACR_SUBSCRIPTION_ID}"
fi

client_name="${key_vault_name%-*}"

# get all secrets and put them in a file for environment variable setting
echo "retrieving secrets"
(
echo "export CLIENT_NAME=${client_name}"
echo "export ACR_NAME=${acr_name}"
echo "export ACR_REGISTRY=${acr_registry}"
echo "export SUBSCRIPTION_ID=${sub_id}"
echo "export RESOURCE_GROUP=${resource_group}"
echo "export KEY_VAULT_NAME=${key_vault_name}"
echo "export KEY_VAULT_URI=https://${key_vault_name}.vault.azure.net/"

if which python > /dev/null
then
    # follow the faster path of getting secrets using a Python script
    export KEY_VAULT_URI=https://${key_vault_name}.vault.azure.net/
    export AZURE_TENANT_ID=${tenant_id}
    export AZURE_SUBSCRIPTION_ID=${sub_id}
    export AZURE_CLIENT_ID=$(az keyvault secret show --name "app-etl-clientid" --vault-name "${key_vault_name}" | jq -r ".value")
    export AZURE_CLIENT_SECRET=$(az keyvault secret show --name "app-etl-password" --vault-name "${key_vault_name}" | jq -r ".value")
    python - << EOF
import os

from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient

credential = DefaultAzureCredential()

secret_client = SecretClient(vault_url=os.environ.get("KEY_VAULT_URI"), credential=credential)
secret_properties = secret_client.list_properties_of_secrets()

for secret_property in secret_properties:
    # the list doesn't include values or versions of the secrets
    secret = secret_client.get_secret(secret_property.name)
    name = secret.name.upper().replace('-', '_')
    print(f"export {name}='{secret.value}'")
EOF
else
    # follow the slower path of getting secrets using plain old bash scripting
    secrets=($(az keyvault secret list --vault-name "${key_vault_name}" | jq -r '.[].name'))
    for i in "${!secrets[@]}"
    do
        secret_name="${secrets[$i]}"
        env_name=$(echo "${secret_name//-/_}" | tr '[:lower:]' '[:upper:]')
        secret_value=$(az keyvault secret show --name "${secret_name}" --vault-name "${key_vault_name}" | jq -r ".value")
        echo "export ${env_name}='${secret_value}'"
        # print a progress dot
        echo -n "." 1>&2
    done
fi

# we run in a subshell and redirect all stdout to a file
) > ~/.az-env-vars

# read what we got so far to get our hands on the secrets retrieved so far
source ~/.az-env-vars

# add Snowflake vars
(
echo "export SNOWSQL_ACCOUNT=${SNOWFLAKE_ACCOUNT_NAME}"
echo "export SNOWSQL_HOST=${SNOWFLAKE_ACCOUNT_URL}"
echo "export SNOWSQL_DATABASE=${SNOWFLAKE_DWH_DATABASE}"
echo "export SNOWSQL_WAREHOUSE=${SNOWFLAKE_ETL_WAREHOUSE}"
echo "export SNOWSQL_SCHEMA=${SNOWFLAKE_ETL_SCHEMA_TMP}"
echo "export SNOWSQL_USER=${SNOWFLAKE_ETL_USERNAME}"
echo "export SNOWSQL_PWD=${SNOWFLAKE_ETL_PASSWORD}"
) >> ~/.az-env-vars

